// Code generated by MockGen. DO NOT EDIT.
// Source: contributor.go

// Package modules_test is a generated GoMock package.
package modules_test

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPackageManager is a mock of PackageManager interface
type MockPackageManager struct {
	ctrl     *gomock.Controller
	recorder *MockPackageManagerMockRecorder
}

// MockPackageManagerMockRecorder is the mock recorder for MockPackageManager
type MockPackageManagerMockRecorder struct {
	mock *MockPackageManager
}

// NewMockPackageManager creates a new mock instance
func NewMockPackageManager(ctrl *gomock.Controller) *MockPackageManager {
	mock := &MockPackageManager{ctrl: ctrl}
	mock.recorder = &MockPackageManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPackageManager) EXPECT() *MockPackageManagerMockRecorder {
	return m.recorder
}

// Install mocks base method
func (m *MockPackageManager) Install(modulesDir, cacheDir string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Install", modulesDir, cacheDir)
	ret0, _ := ret[0].(error)
	return ret0
}

// Install indicates an expected call of Install
func (mr *MockPackageManagerMockRecorder) Install(modulesDir, cacheDir interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Install", reflect.TypeOf((*MockPackageManager)(nil).Install), modulesDir, cacheDir)
}

// Check mocks base method
func (m *MockPackageManager) Check(appDir string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", appDir)
	ret0, _ := ret[0].(error)
	return ret0
}

// Check indicates an expected call of Check
func (mr *MockPackageManagerMockRecorder) Check(appDir interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockPackageManager)(nil).Check), appDir)
}

// SetConfig mocks base method
func (m *MockPackageManager) SetConfig(location, key, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetConfig", location, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetConfig indicates an expected call of SetConfig
func (mr *MockPackageManagerMockRecorder) SetConfig(location, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfig", reflect.TypeOf((*MockPackageManager)(nil).SetConfig), location, key, value)
}
